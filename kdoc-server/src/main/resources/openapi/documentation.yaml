openapi: "3.1.0"
info:
  title: "KDoc API"
  description: "KDoc API"
  version: "1.0.0"
servers:
  - url: "http://127.0.0.1:8080"
  - url: "https://127.0.0.1:8443"
tags:
  - name: "Token"
    description: " <br> "
  - name: "System"
    description: " <br> "
  - name: "RBAC"
    description: " <br> "
  - name: "Document - Delete"
    description: " <br> "
  - name: "Document - Find"
    description: " <br> "
  - name: "Document - Operate"
    description: " <br> "
paths:
  /:
    get:
      description: "Server root endpoint."
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World."
                Example#2:
                  value: ""
    post:
      description: "Search (filter) for documents."
      parameters:
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Page_? extends Document"
  /auth/token/create:
    post:
      tags:
        - "Token"
      description: "Creates a new token; requires Basic Authentication credentials."
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid SessionContext. Use either admin/admin or guest/guest."
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Failed to generate token."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /auth/token/refresh:
    post:
      tags:
        - "Token"
      description: "Refreshes an existing token; requires Basic Authentication credentials.\
        \ <br> No Basic Authentication is required here, but an existing token's validity\
        \ will be checked. <br> For example, in Postman set the endpoint and in the\
        \ Headers add an Authorization key <br> with a 'Bearer' holding a previous\
        \ valid token."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid SessionContext. Use either admin/admin or guest/guest."
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Failed to generate token."
        "401":
          description: "Unauthorized <br> Token is invalid; respond with an Unauthorized\
            \ status."
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid token."
  /events:
    get:
      tags:
        - "System"
      description: "Server-Sent Events (SSE) endpoint."
      responses:
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
  /health:
    get:
      tags:
        - "System"
      description: "Healthcheck providing the current operational status."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/HealthCheck"
  /rbac/dashboard:
    get:
      tags:
        - "RBAC"
      description: "Opens the RBAC dashboard. Redirects to the login screen if the\
        \ SessionContext is invalid."
      parameters:
        - name: "role"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "302":
          description: "Found <br> Redirect"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "/rbac/login"
        "200":
          description: "OK <br> Respond with HTML view of the RBAC dashboard."
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Function1_? super HTML"
              examples:
                text/html:
                  description: "HTML document"
                  value: ""
    post:
      tags:
        - "RBAC"
      description: "Processes updates to RBAC settings based on actor submissions\
        \ from the dashboard form."
      parameters:
        - name: "role"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "302":
          description: "Found <br> Redirect"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "/rbac/login"
                Example#2:
                  description: ""
                  value: "/rbac/login"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Function1_? super HTML"
              examples:
                text/html:
                  description: "HTML document"
                  value: ""
  /rbac/login:
    get:
      tags:
        - "RBAC"
      description: "Redirects actors to the dashboard if they have an existing session,\
        \ <br> or to the login page if no valid session is found."
      responses:
        "302":
          description: "Found <br> Redirect"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "/rbac/dashboard"
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Function1_? super HTML"
              examples:
                text/html:
                  description: "HTML document"
                  value: ""
    post:
      tags:
        - "RBAC"
      description: "Redirects actors to the dashboard after successful authentication."
      responses:
        "302":
          description: "Found <br> Redirect"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "/rbac/dashboard"
  /rbac/logout:
    post:
      tags:
        - "RBAC"
      description: "Clears the session and redirects to the login page."
      responses:
        "302":
          description: "Found <br> Redirect"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  description: ""
                  value: "/rbac/login"
  /snowflake/{id}:
    get:
      tags:
        - "System"
      description: "Snowflake parser to read back the components of a snowflake ID."
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/SnowflakeData"
  /v1/document:
    delete:
      tags:
        - "Document - Delete"
      description: "Delete all document entries."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
    get:
      tags:
        - "Document - Find"
      description: "Find all existing documents."
      parameters:
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Page_? extends Document"
  /v1/document/{document_id}:
    delete:
      tags:
        - "Document - Delete"
      description: "Delete a document by ID."
      parameters:
        - name: "document_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
    get:
      tags:
        - "Document - Find"
      description: "Find a document by ID."
      parameters:
        - name: "document_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Document"
  /v1/document/{owner_id}/{group_id}/{type}/{cipher}:
    post:
      tags:
        - "Document - Operate"
      description: "Upload a new document."
      parameters:
        - name: "owner_id"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "group_id"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "type"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "cipher"
          in: "query"
          required: false
          schema:
            type: "boolean"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid request."
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Document"
  /v1/document/backup:
    get:
      tags:
        - "Document - Operate"
      description: "Downloads a backup file containing all the documents."
      responses:
        "204":
          description: "No Content"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "No documents found."
  /v1/document/cipher/{cipher}:
    put:
      tags:
        - "Document - Operate"
      description: "Change the cipher state of all documents."
      parameters:
        - name: "cipher"
          in: "path"
          required: true
          schema:
            type: "boolean"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
  /v1/document/download/{token}/{signature}:
    get:
      tags:
        - "Document - Operate"
      description: "Serve a document file to download."
      parameters:
        - name: "token"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "signature"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing token or signature."
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Unable to initiate download."
  /v1/document/group/{group_id}:
    delete:
      tags:
        - "Document - Delete"
      description: "Delete all documents by group."
      parameters:
        - name: "group_id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
    get:
      tags:
        - "Document - Find"
      description: "Find all documents by group."
      parameters:
        - name: "group_id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Page_? extends Document"
  /v1/document/owner/{owner_id}:
    get:
      tags:
        - "Document - Find"
      description: "Find all documents by owner."
      parameters:
        - name: "owner_id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Page_? extends Document"
  /v1/document/url/{document_id}/{group_id}:
    get:
      tags:
        - "Document - Operate"
      description: "Generate the signed URL for a document download."
      parameters:
        - name: "document_id"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "group_id"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Either document_id or group_id must be provided."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
components:
  schemas:
    Sort:
      type: "object"
      properties:
        table:
          type: "string"
        field:
          type: "string"
        direction:
          type: "string"
          enum:
            - "ASC"
            - "DESC"
      required:
        - "field"
        - "direction"
    Details:
      type: "object"
      properties:
        totalPages:
          type: "integer"
          format: "int32"
        pageIndex:
          type: "integer"
          format: "int32"
        totalElements:
          type: "integer"
          format: "int32"
        elementsPerPage:
          type: "integer"
          format: "int32"
        elementsInPage:
          type: "integer"
          format: "int32"
        hasNext:
          type: "boolean"
        hasPrevious:
          type: "boolean"
        overflow:
          type: "boolean"
        sort:
          type: "array"
          items:
            $ref: "#/components/schemas/Sort"
    Page:
      type: "object"
      properties:
        details:
          $ref: "#/components/schemas/Details"
        content:
          type: "array"
      required:
        - "details"
        - "content"
    Page_? extends Document:
      type: "object"
      properties:
        details:
          $ref: "#/components/schemas/Details"
        content:
          type: "array"
          items:
            type: "object"
    ApplicationCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        apiSchemaEnabled:
          type: "boolean"
      required:
        - "errors"
    Configured:
      type: "object"
      properties:
        protocol:
          type: "string"
        port:
          type: "integer"
          format: "int32"
        sslPort:
          type: "integer"
          format: "int32"
        host:
          type: "string"
        allowedHosts:
          type: "array"
          items:
            type: "string"
      required:
        - "protocol"
        - "host"
        - "allowedHosts"
    ServerSpec:
      type: "object"
      properties:
        serverHost:
          type: "string"
        serverPort:
          type: "integer"
          format: "int32"
        localHost:
          type: "string"
        localPort:
          type: "integer"
          format: "int32"
        remoteHostHost:
          type: "string"
        remoteAddress:
          type: "string"
        remotePort:
          type: "integer"
          format: "int32"
        httpVersion:
          type: "string"
        scheme:
          type: "string"
    DeploymentCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        configured:
          $ref: "#/components/schemas/Configured"
        serverSpec:
          $ref: "#/components/schemas/ServerSpec"
        connectors:
          type: "string"
      required:
        - "errors"
        - "configured"
        - "serverSpec"
        - "connectors"
    LocalDateTime:
      type: "object"
      properties: { }
    RuntimeCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        machineId:
          type: "integer"
          format: "int32"
        environment:
          type: "string"
          enum:
            - "DEV"
            - "PROD"
            - "STAGING"
            - "TEST"
        developmentModeEnabled:
          type: "boolean"
        utc:
          $ref: "#/components/schemas/LocalDateTime"
        local:
          $ref: "#/components/schemas/LocalDateTime"
      required:
        - "errors"
        - "environment"
        - "utc"
        - "local"
    LimitSpec:
      type: "object"
      properties:
        limit:
          type: "integer"
          format: "int32"
        refillMs:
          type: "integer"
          format: "int64"
    SecurityCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        useSecureConnection:
          type: "boolean"
        publicApi:
          $ref: "#/components/schemas/LimitSpec"
        privateApi:
          $ref: "#/components/schemas/LimitSpec"
        newToken:
          $ref: "#/components/schemas/LimitSpec"
      required:
        - "errors"
        - "publicApi"
        - "privateApi"
        - "newToken"
    SnowflakeData:
      type: "object"
      properties:
        machineId:
          type: "integer"
          format: "int32"
        sequence:
          type: "integer"
          format: "int64"
        utc:
          $ref: "#/components/schemas/LocalDateTime"
        local:
          $ref: "#/components/schemas/LocalDateTime"
      required:
        - "utc"
        - "local"
    SnowflakeCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        testId:
          type: "string"
        testResult:
          $ref: "#/components/schemas/SnowflakeData"
        timestampEpoch:
          type: "integer"
          format: "int64"
        nanoTimeStart:
          type: "integer"
          format: "int64"
      required:
        - "errors"
    Datasource:
      type: "object"
      properties:
        totalConnections:
          type: "integer"
          format: "int32"
        activeConnections:
          type: "integer"
          format: "int32"
        idleConnections:
          type: "integer"
          format: "int32"
        threadsAwaitingConnection:
          type: "integer"
          format: "int32"
        connectionTimeout:
          type: "integer"
          format: "int64"
        maxLifetime:
          type: "integer"
          format: "int64"
        keepaliveTime:
          type: "integer"
          format: "int64"
        maxPoolSize:
          type: "integer"
          format: "int32"
    ConnectionTest:
      type: "object"
      properties:
        established:
          type: "boolean"
        name:
          type: "string"
        version:
          type: "string"
        dialect:
          type: "string"
        url:
          type: "string"
        vendor:
          type: "string"
        autoCommit:
          type: "boolean"
        catalog:
          type: "string"
      required:
        - "name"
        - "version"
        - "dialect"
        - "url"
        - "vendor"
        - "catalog"
    Configuration:
      type: "object"
      properties:
        poolSize:
          type: "integer"
          format: "int32"
        connectionTimeout:
          type: "integer"
          format: "int64"
        transactionRetryAttempts:
          type: "integer"
          format: "int32"
        warnLongQueriesDurationMs:
          type: "integer"
          format: "int64"
        jdbcDriver:
          type: "string"
        jdbcUrl:
          type: "string"
      required:
        - "jdbcDriver"
        - "jdbcUrl"
    DatabaseCheck:
      type: "object"
      properties:
        errors:
          type: "array"
          items:
            type: "string"
        alive:
          type: "boolean"
        datasource:
          $ref: "#/components/schemas/Datasource"
        connectionTest:
          $ref: "#/components/schemas/ConnectionTest"
        configuration:
          $ref: "#/components/schemas/Configuration"
        tables:
          type: "array"
          items:
            type: "string"
      required:
        - "errors"
        - "configuration"
        - "tables"
    HealthCheck:
      type: "object"
      properties:
        health:
          type: "array"
          items:
            type: "string"
        application:
          $ref: "#/components/schemas/ApplicationCheck"
        deployment:
          $ref: "#/components/schemas/DeploymentCheck"
        runtime:
          $ref: "#/components/schemas/RuntimeCheck"
        security:
          $ref: "#/components/schemas/SecurityCheck"
        snowflake:
          $ref: "#/components/schemas/SnowflakeCheck"
        database:
          $ref: "#/components/schemas/DatabaseCheck"
        endpoints:
          type: "array"
          items:
            type: "string"
      required:
        - "health"
        - "application"
        - "deployment"
        - "runtime"
        - "security"
        - "snowflake"
        - "database"
        - "endpoints"
    Function1:
      type: "object"
      properties: { }
    Function1_? super HTML:
      type: "object"
    Uuid:
      type: "string"
      format: "uuid"
    Detail:
      type: "object"
      properties:
        type:
          type: "string"
          enum:
            - "GENERAL"
            - "CERTIFICATE"
            - "CONTRACT"
            - "INVOICE"
            - "PASSPORT"
            - "PERSONAL_ID"
            - "RECEIPT"
            - "REPORT"
        description:
          type: "string"
        originalName:
          type: "string"
        storageName:
          type: "string"
        location:
          type: "string"
        path:
          type: "string"
        size:
          type: "integer"
          format: "int64"
      required:
        - "type"
        - "originalName"
        - "storageName"
        - "location"
        - "path"
    Meta:
      type: "object"
      properties:
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
      required:
        - "createdAt"
        - "updatedAt"
    Document:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/Uuid"
        ownerId:
          $ref: "#/components/schemas/Uuid"
        groupId:
          $ref: "#/components/schemas/Uuid"
        detail:
          $ref: "#/components/schemas/Detail"
        meta:
          $ref: "#/components/schemas/Meta"
      required:
        - "id"
        - "ownerId"
        - "groupId"
        - "detail"
        - "meta"